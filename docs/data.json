{
    "project": {
        "name": "syncano",
        "description": "library description",
        "version": "0.0.1",
        "url": ""
    },
    "files": {
        "dist/syncano.js": {
            "name": "dist/syncano.js",
            "modules": {},
            "classes": {
                "Syncano": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Syncano": {
            "name": "Syncano",
            "shortname": "Syncano",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/syncano.js",
            "line": 1593,
            "description": "Real time high level library for Syncano (www.syncano.com)",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "dist/syncano.js",
            "line": 6,
            "description": "Library agnostic version of jQuery's Extend by @jonjaques",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 95,
            "description": "converts string in camel case (eg. dataKey) to lowercase with underscores (eg. data_key)",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 112,
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 119,
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 129,
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 140,
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 150,
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 157,
            "description": "very simple pub-sub structure. Based on PubSubJS by @mroderick (https://github.com/mroderick/PubSubJS)",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 166,
            "description": "Register specified function as a callback for given message",
            "params": [
                {
                    "name": "message",
                    "description": "- message identifier",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- function to call when message is triggered",
                    "type": "Function"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 186,
            "description": "Does message have subscribers?",
            "params": [
                {
                    "name": "message",
                    "description": "- message identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": ": boolean"
            },
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 202,
            "description": "Remove specified function callback. If no func is given, removes all callbacks for given message",
            "params": [
                {
                    "name": "message",
                    "description": "- message identifier",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "- function to remove",
                    "type": "Function"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 226,
            "description": "Calls asynchronically all registered functions for given message. Shortcut method for doTrigger(message, false)",
            "params": [
                {
                    "name": "message",
                    "description": "- message identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": ": boolean (true = success, false = fail)"
            },
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 236,
            "description": "Calls synchronically all registered functions for given message. Shortcut method for doTrigger(message, true)",
            "params": [
                {
                    "name": "message",
                    "description": "- message identifier",
                    "type": "String"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 245,
            "description": "Calls all registered functions for given message",
            "params": [
                {
                    "name": "message",
                    "description": "- message identifier",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "- true for synchronous calls, false for asynchronous",
                    "type": "Boolean"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 269,
            "description": "trigger event for 'all'. Send original message name as the first parameter",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 291,
            "description": "Methods for handling projects - creating, reading, updating, deleting",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 297,
            "description": "Create new project",
            "itemtype": "method",
            "name": "Project.new",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the project",
                    "type": "String"
                },
                {
                    "name": "description",
                    "description": "Short description of the project",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 316,
            "description": "Gets list of all projects in current instance",
            "itemtype": "method",
            "name": "Project.get",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 328,
            "description": "Receives detailed informations about project with given id",
            "itemtype": "method",
            "name": "Project.getOne",
            "params": [
                {
                    "name": "id",
                    "description": "Project identifier",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 342,
            "description": "Updates project details (name, description)",
            "itemtype": "method",
            "name": "Project.update",
            "params": [
                {
                    "name": "id",
                    "description": "Project identifier",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "Optional new name of the project",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Optional new description of the project",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 368,
            "description": "Deletes project",
            "itemtype": "method",
            "name": "Project.delete",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 381,
            "description": "Methods for handling collections - creating, reading, updating, deleting",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 387,
            "description": "Create new collection within specified project",
            "itemtype": "method",
            "name": "Collection.new",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id that collection will be created for",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "New collections name",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "New collections key",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "description",
                    "description": "New collection's description",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 414,
            "description": "Get collections from specified project",
            "itemtype": "method",
            "name": "Collection.get",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "status",
                    "description": "Status of events to list. Accepted values: active, inactive, all. Default value: all",
                    "type": "String"
                },
                {
                    "name": "withTags",
                    "description": "If specified, will only list events that has specified tag(s) defined. Note: tags are case sensitive",
                    "type": "String / Array"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 440,
            "description": "Get one collection from specified project.\ncollection_id/collection_key parameter means that one can use either one of them - collection_id or collection_key",
            "itemtype": "method",
            "name": "Collection.getOne",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 461,
            "description": "Activates specified collection",
            "itemtype": "method",
            "name": "Collection.activate",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collectionId",
                    "description": "Collection id defining collection to be activated",
                    "type": "Number"
                },
                {
                    "name": "force",
                    "description": "If set to True, will force the activation by deactivating all other collections that may share it's data_key.",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 492,
            "description": "Deactivates specified collection\ncollection_id/collection_key parameter means that one can use either one of them - collection_id or collection_key",
            "itemtype": "method",
            "name": "Collection.deactivate",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 513,
            "description": "Update existing collections name and/or description",
            "itemtype": "method",
            "name": "Collection.update",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "name",
                    "description": "New collection name",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "description",
                    "description": "New collection description",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 541,
            "description": "Add a tag to specific event.\nNote: tags are case sensitive.",
            "itemtype": "method",
            "name": "Collection.addTag",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "tags",
                    "description": "Tag(s) to be added. Either string (one tag) or array (multiple tags)",
                    "type": "String / Array"
                },
                {
                    "name": "weight",
                    "description": "Tags weight. Default value = 1",
                    "type": "Float",
                    "optional": true
                },
                {
                    "name": "removeOther",
                    "description": "If true, will remove all other tags of specified collection. Default value: False",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 565,
            "description": "currently only ascii chars are supported",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 586,
            "description": "Delete a tag or tags from specified collection.\nNote: tags are case sensitive",
            "itemtype": "method",
            "name": "Collection.deleteTag",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "tags",
                    "description": "Tag(s) to be added. Either string (one tag) or array (multiple tags)",
                    "type": "String / Array"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 608,
            "description": "currently only ascii chars are supported",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 626,
            "description": "Permanently delete specified collection and all associated data.",
            "itemtype": "method",
            "name": "Collection.delete",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 645,
            "description": "methods for handling folders - creating, reading, updating, deleting",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 651,
            "description": "Create new folder within specified collection",
            "itemtype": "method",
            "name": "Folder.new",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "name",
                    "description": "Folder name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 675,
            "description": "Get folders for specified collection",
            "name": "method Folder.get",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Collection id or key defining collection for which folders will be returned",
                    "type": "String / Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 695,
            "description": "Get folders for specified collection",
            "name": "method Folder.getOne",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Collection id or key defining collection for which folder will be returned",
                    "type": "String / Number"
                },
                {
                    "name": "folderName",
                    "description": "Folder name defining folder",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 721,
            "description": "Update existing folder\nParams newName and sourceId can be passed as a single object: {newName: '', sourceId: ''}",
            "itemtype": "method",
            "name": "Folder.update",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Collection id or key defining collection for which folder will be returned",
                    "type": "String / Number"
                },
                {
                    "name": "folderName",
                    "description": "Folder name defining folder",
                    "type": "String"
                },
                {
                    "name": "newName",
                    "description": "New folder name",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "sourceId",
                    "description": "New source id, can be used for mapping folders to external source",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 768,
            "description": "Permanently delete specified folder and all associated data",
            "itemtype": "method",
            "name": "Folder.delete",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Collection id or key defining collection for which folder will be returned",
                    "type": "String / Number"
                },
                {
                    "name": "folderName",
                    "description": "Folder name defining folder",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 795,
            "description": "Creates a new Data Object",
            "itemtype": "method",
            "name": "Data.new",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "dataKey",
                            "description": "Used for uniquely identifying message. Has to be unique within collection. Useful for updating",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "userName",
                            "description": "Name of user to associate Data Object with. If not set, internal user 'syncano' is used",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sourceUrl",
                            "description": "Source URL associated with message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "description": "Title of data object",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "text",
                            "description": "Text data associated with message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "link",
                            "description": "Link associated with message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "image",
                            "description": "Image data associated with message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "imageUrl",
                            "description": "Image source URL. Used in combination with image parameter",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folder",
                            "description": "Folder name that data will be put in. Default value: 'Default'.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "State of data to be initially set. Accepted values: Pending, Moderated, Rejected. Default value: Pending",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "parentId",
                            "description": "If specified, creates one parent-child relation with specified parent id.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "additional",
                            "description": "Any number of additional parameters (key - value)",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 825,
            "description": "all optional params",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 873,
            "description": "Get data from collection(s) or whole project with optional additional filtering. All filters, unless explicitly noted otherwise, affect all hierarchy levels.\nTo paginate and to get more data, use since_id or since_time parameter\nAll optional params should be passed as a single object: {key: value, ...}",
            "itemtype": "method",
            "name": "Data.get",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "optionalParams",
                    "description": "Object with additional parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "dataIds",
                            "description": "If specified, will return data objects with specified ids. Note: has no effect on returned data object's children. Max 100 values per request",
                            "type": "String / Array",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "State of data to be returned. Accepted values: Pending, Moderated, Rejected, All. Default value: All.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folders",
                            "description": "Folder name that data will be returned from. Max 100 values per request. If not presents returns data from across all collection folders",
                            "type": "String / Array",
                            "optional": true
                        },
                        {
                            "name": "sinceId",
                            "description": "If specified, will only return data with id higher than since_id (newer). Note: has no effect on returned data object's children",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sinceTime",
                            "description": "String with date. If specified, will only return data with created_at or updated_at time after specified value (newer). Note: has no effect on returned data object's children",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "maxId",
                            "description": "If specified, will only return data with id lower than max_id (older)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "Number of Data Objects to be returned. Default and max value: 100",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "Sets order of data that will be returned. ASC (default) - oldest first, DESC - newest first",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "orderBy",
                            "description": "Orders by specified criteria. created_at (default), updated_at",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "TEXT - only data with text field specified, IMAGE - only data with an image attached",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "includeChildren",
                            "description": "If true, include Data Object children as well (recursively). Default value: True.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "depth",
                            "description": "Max depth of children to follow. If not specified, will follow all levels until children limit is reached",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "childrenLimit",
                            "description": "Limit of children to show (if include_children is True). Default and max value: 100 (some children levels may be incomplete if there are more than this limit).",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "parentIds",
                            "description": "Data Object id or ids. If specified, only children of specific Data Object parent will be listed",
                            "type": "String / Array",
                            "optional": true
                        },
                        {
                            "name": "byUser",
                            "description": "If specified, filter by Data Object user's name",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 912,
            "description": "these optionalParams are just copied to params array if they are set",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 923,
            "description": "these optionalParams have to be numbers - so check if they are set and are proper numbers. If not - throw an Error",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 991,
            "description": "Get data by data_id or data_key",
            "itemtype": "method",
            "name": "Data.getOne",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "dataKeyOrId",
                    "description": "Either data id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1020,
            "itemtype": "method",
            "name": "Data.update",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "dataKeyOrId",
                    "description": "Either data id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "optionalParams",
                    "description": "Object with additional parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "updateMethod",
                            "description": "Default value: replace",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "user_name",
                            "description": "User name of user to associate Data Object with. If not set, internal user 'syncano' is used",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sourceUrl",
                            "description": "Source URL associated with message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "description": "Title of message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "text",
                            "description": "Text data associated with message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "link",
                            "description": "Link associated with message",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "image",
                            "description": "Image data associated with message. If specified as empty string - will instead delete current image",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "imageUrl",
                            "description": "Image source URL. Used in combination with image parameter",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folder",
                            "description": "Folder name that data will be put in. Default value: 'Default'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "State of data to be initially set. Accepted values: Pending, Moderated, Rejected. Default value: Pending",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "parentId",
                            "description": "If specified, new Data Object becomes a child of specified parent id. Note that all other parent-child relations for this Data Object are removed",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1087,
            "description": "Moves data to folder and/or state",
            "itemtype": "method",
            "name": "Data.move",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "dataKeyOrId",
                    "description": "Either data id (number) or key (string)",
                    "type": "String / Number"
                },
                {
                    "name": "optionalParams",
                    "description": "Object with additional parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "dataIds",
                            "description": "If specified, will filter by Data id or ids. Max 100 ids per request.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folders",
                            "description": "If specified, filter by specified folder or folders. Max 100 values per request.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "If specified, filter by Data state. Accepted values: Pending, Moderated, All. Default value: All.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "TEXT - only data with text IMAGE - only data with an image",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "byUser",
                            "description": "If specified, filter by user's name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "Number of Data Objects to process. Default and max value: 100",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "newFolder",
                            "description": "Destination folder where data will be moved. If not specified, leaves folder as is.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "newState",
                            "description": "State to be set data for specified data. Accepted values: Pending, Moderated. If not specified, leaves state as is.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1123,
            "description": "these optionalParams are just copied to params array if they are set",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1171,
            "description": "Copies data with data_id. Copy has data_key cleared",
            "itemtype": "method",
            "name": "Data.copy",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "dataId",
                    "description": "Data id or ids",
                    "type": "String / Array"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1205,
            "description": "Adds additional parent to data with data_id. If remove_other is True, all other parents of specified Data Object will be removed.",
            "itemtype": "method",
            "name": "Data.addParent",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "dataId",
                    "description": "Data Object id",
                    "type": "Number"
                },
                {
                    "name": "parentId",
                    "description": "Parent id to add",
                    "type": "Number"
                },
                {
                    "name": "removeOther",
                    "description": "If true, will remove all other parents. Default value: False",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1245,
            "description": "Removes a parent (or parents) from data with data_id",
            "itemtype": "method",
            "name": "Data.removeParent",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "dataId",
                    "description": "Data Object id",
                    "type": "Number"
                },
                {
                    "name": "parentId",
                    "description": "Parent id to remove. If not specified, will remove all Data Object parents",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1278,
            "description": "Adds additional child to data with data_id. If remove_other is True, all other children of specified Data Object will be removed.\nNote: There is a limit of maximum 250 parents per Data Object, but there is no limit of children.",
            "itemtype": "method",
            "name": "Data.addChild",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "dataId",
                    "description": "Data Object id",
                    "type": "Number"
                },
                {
                    "name": "childId",
                    "description": "Child id to add",
                    "type": "Number"
                },
                {
                    "name": "removeOther",
                    "description": "If true, will remove all other parents. Default value: False",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1319,
            "description": "Removes a child (or children) from data with data_id.",
            "itemtype": "method",
            "name": "Data.removeChild",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "dataId",
                    "description": "Data Object id",
                    "type": "Number"
                },
                {
                    "name": "childId",
                    "description": "Child id to remove. If not specified, will remove all Data Object children",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1352,
            "description": "Deletes Data Object. If no filters are specified, will process all Data Objects in defined collection(s) (up to defined limit).",
            "itemtype": "method",
            "name": "Data.delete",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "dataIds",
                            "description": "If specified, will filter by Data id or ids. Max 100 ids per request",
                            "type": "Number / Array",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "If specified, filter by Data state. Accepted values: Pending, Moderated, All. Default value: All",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folders",
                            "description": "If specified, filter by specified folder or folders. Max 100 values per request",
                            "type": "String / Array",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "TEXT - only data with text IMAGE - only data with an image",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "byUser",
                            "description": "If specified, filter by user name.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "Number of Data Objects to process. Default and max value: 100.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1377,
            "description": "these optionalParams are just copied to params array if they are set",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1417,
            "description": "Counts data of specified criteria",
            "itemtype": "method",
            "name": "Data.count",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "state",
                            "description": "State of data to be counted. Accepted values: Pending, Moderated, All. Default value: All",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folders",
                            "description": "Folder name(s) that data will be counted from. If not presents counts data from across all collection folders. Max 100 values per request",
                            "type": "String / Array",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "TEXT - only data with text IMAGE - only data with an image",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "byUser",
                            "description": "If specified, filter by user name.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1440,
            "description": "these optionalParams are just copied to params array if they are set",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1471,
            "description": "Methods for user management",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1476,
            "description": "Creates new user",
            "itemtype": "method",
            "name": "User.new",
            "params": [
                {
                    "name": "name",
                    "description": "User's name",
                    "type": "String"
                },
                {
                    "name": "nick",
                    "description": "User's nick",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1500,
            "description": "Get all users from within instance. To paginate and to get more data, use since_id or since_time parameter.",
            "itemtype": "method",
            "name": "User.getAll",
            "params": [
                {
                    "name": "sinceId",
                    "description": "If specified, will only return users with id higher than since_id (newer).",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "Number of users to be returned. Default and max value: 100",
                    "type": "Number"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1537,
            "description": "Get users of specified criteria that are associated with Data Objects within specified collection",
            "itemtype": "method",
            "name": "Data.count",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project id",
                    "type": "Number"
                },
                {
                    "name": "collection",
                    "description": "Either collection id or key",
                    "type": "String / Number"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "state",
                            "description": "Return only users whose Data Objects are in specified state. Accepted values: Pending, Moderated, Rejected, All. Default value: All",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folders",
                            "description": "Folder name that data will be returned from. Max 100 values per request. If not present returns data from across all collection folders",
                            "type": "String / Array",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "TEXT - only return users that sent data with text IMAGE - only return users that sent data with an image",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to be called when successful response comes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1583,
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1600,
            "description": "TODO: in final version change url to api.syncano.com\n      during development stage, every time you start a session you have to open link below in browser\n      and accept the certificate",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1611,
            "description": "queue for messages which could not be sent because of no connection",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1616,
            "description": "in this list we will keep arrays of [action, callback] for every sent message, so we will be able to run callback function\nwhen answer to message arrives. The list is indexed with message_id attribute",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1622,
            "description": "High-level function mixins",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1638,
            "description": "add PubSub mixin",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1644,
            "description": "Establishes connecion to the server and sends authorization request.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "params",
                    "description": "Connection parameters {instance, api_key, optional timezone}. If any of them is not defined, error is thrown",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Optional callback to be called after successful connection and authorization.",
                    "type": "Function"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1675,
            "description": "Internal method called after the socket is open. Sends authorization request - instance, api_key and (optional) timezone \ndefined in this.connectionParams.",
            "itemtype": "method",
            "name": "onSocketOpen",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1687,
            "description": "Internal method called automatically when socket is closed. Clears SockJS instance, changes state to DISCONNECTED. If there was\nwaiting request to reconnect, handles reconnection with the same params.",
            "itemtype": "method",
            "name": "onSocketClose",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1703,
            "description": "Method called every time the message is received. Message is passed as e.data\nIf there was an error, e.data.result is 'NOK' (not ok), otherwise e.data has response data.",
            "itemtype": "method",
            "name": "onMessage",
            "params": [
                {
                    "name": "e",
                    "description": "event object",
                    "type": "Object"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1736,
            "description": "After successful authorization trigger event and send all queued messages",
            "itemtype": "method",
            "name": "parseAuthorizationResponse",
            "params": [
                {
                    "name": "data",
                    "description": "Object send by server. Fields: timestamp, uuid, type, result",
                    "type": "Object"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1751,
            "description": "Receiven new callresponse message. If we were waiting for this response, handle it (call callback, etc). Otherwise - ignore",
            "itemtype": "method",
            "name": "parseCallResponse",
            "params": [
                {
                    "name": "data",
                    "description": "- data received. Fields: type (=callresponse), message_id, result, data",
                    "type": "Object"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1774,
            "description": "Sends all requests waiting in the queue and clears the queue.",
            "itemtype": "method",
            "name": "sendQueue",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1787,
            "description": "Generates unique message id",
            "itemtype": "method",
            "name": "getNextRequestId",
            "return": {
                "description": "next unique identifier",
                "type": "Number"
            },
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1798,
            "description": "Sends request as a string. Internal low-level function, should not be used outside",
            "itemtype": "method",
            "name": "socketSend",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1809,
            "description": "Universal high-level function for sending requests to syncano. \nSends request to 'method' with given 'params' if the socket is connected. If not, puts request on the queue to be sent later.\nUses internal 'waitingForResponse' object to match request with response.",
            "itemtype": "method",
            "name": "sendRequest",
            "params": [
                {
                    "name": "method",
                    "description": "Name of the Syncano method to call (check syncano docs)",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters to send. Every method needs different parameters (check syncano docs)",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call after receiving response from server",
                    "type": "Function"
                }
            ],
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1832,
            "description": "Remember method and callback on the waitingForResponse list. When the response comes, callback will be called",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1837,
            "description": "Send message to socket if already open and authorized. Otherwise - push to requestsQueue",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1849,
            "description": "Internal method to check if projectId is a number - so I don't have to write this manualy again and again",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1858,
            "description": "Internal method to check the variable name (string or number) and add correct key to passed object",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1872,
            "description": "Internal shortcut method to send request and run the callback function with proper data as parameter",
            "class": "Syncano"
        },
        {
            "file": "dist/syncano.js",
            "line": 1892,
            "description": "Export to the root, which is probably `window`.",
            "class": "Syncano"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: name",
            "line": " dist/syncano.js:675"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/syncano.js:695"
        },
        {
            "message": "Missing item type\nLibrary agnostic version of jQuery's Extend by @jonjaques",
            "line": " dist/syncano.js:6"
        },
        {
            "message": "Missing item type\nconverts string in camel case (eg. dataKey) to lowercase with underscores (eg. data_key)",
            "line": " dist/syncano.js:95"
        },
        {
            "message": "Missing item type",
            "line": " dist/syncano.js:112"
        },
        {
            "message": "Missing item type",
            "line": " dist/syncano.js:119"
        },
        {
            "message": "Missing item type",
            "line": " dist/syncano.js:129"
        },
        {
            "message": "Missing item type",
            "line": " dist/syncano.js:140"
        },
        {
            "message": "Missing item type",
            "line": " dist/syncano.js:150"
        },
        {
            "message": "Missing item type\nvery simple pub-sub structure. Based on PubSubJS by @mroderick (https://github.com/mroderick/PubSubJS)",
            "line": " dist/syncano.js:157"
        },
        {
            "message": "Missing item type\nRegister specified function as a callback for given message",
            "line": " dist/syncano.js:166"
        },
        {
            "message": "Missing item type\nDoes message have subscribers?",
            "line": " dist/syncano.js:186"
        },
        {
            "message": "Missing item type\nRemove specified function callback. If no func is given, removes all callbacks for given message",
            "line": " dist/syncano.js:202"
        },
        {
            "message": "Missing item type\nCalls asynchronically all registered functions for given message. Shortcut method for doTrigger(message, false)",
            "line": " dist/syncano.js:226"
        },
        {
            "message": "Missing item type\nCalls synchronically all registered functions for given message. Shortcut method for doTrigger(message, true)",
            "line": " dist/syncano.js:236"
        },
        {
            "message": "Missing item type\nCalls all registered functions for given message",
            "line": " dist/syncano.js:245"
        },
        {
            "message": "Missing item type\ntrigger event for 'all'. Send original message name as the first parameter",
            "line": " dist/syncano.js:269"
        },
        {
            "message": "Missing item type\nMethods for handling projects - creating, reading, updating, deleting",
            "line": " dist/syncano.js:291"
        },
        {
            "message": "Missing item type\nMethods for handling collections - creating, reading, updating, deleting",
            "line": " dist/syncano.js:381"
        },
        {
            "message": "Missing item type\ncurrently only ascii chars are supported",
            "line": " dist/syncano.js:565"
        },
        {
            "message": "Missing item type\ncurrently only ascii chars are supported",
            "line": " dist/syncano.js:608"
        },
        {
            "message": "Missing item type\nmethods for handling folders - creating, reading, updating, deleting",
            "line": " dist/syncano.js:645"
        },
        {
            "message": "Missing item type\nGet folders for specified collection",
            "line": " dist/syncano.js:675"
        },
        {
            "message": "Missing item type\nGet folders for specified collection",
            "line": " dist/syncano.js:695"
        },
        {
            "message": "Missing item type\nall optional params",
            "line": " dist/syncano.js:825"
        },
        {
            "message": "Missing item type\nthese optionalParams are just copied to params array if they are set",
            "line": " dist/syncano.js:912"
        },
        {
            "message": "Missing item type\nthese optionalParams have to be numbers - so check if they are set and are proper numbers. If not - throw an Error",
            "line": " dist/syncano.js:923"
        },
        {
            "message": "Missing item type\nthese optionalParams are just copied to params array if they are set",
            "line": " dist/syncano.js:1123"
        },
        {
            "message": "Missing item type\nthese optionalParams are just copied to params array if they are set",
            "line": " dist/syncano.js:1377"
        },
        {
            "message": "Missing item type\nthese optionalParams are just copied to params array if they are set",
            "line": " dist/syncano.js:1440"
        },
        {
            "message": "Missing item type\nMethods for user management",
            "line": " dist/syncano.js:1471"
        },
        {
            "message": "Missing item type",
            "line": " dist/syncano.js:1583"
        },
        {
            "message": "Missing item type\nTODO: in final version change url to api.syncano.com\n      during development stage, every time you start a session you have to open link below in browser\n      and accept the certificate",
            "line": " dist/syncano.js:1600"
        },
        {
            "message": "Missing item type\nqueue for messages which could not be sent because of no connection",
            "line": " dist/syncano.js:1611"
        },
        {
            "message": "Missing item type\nin this list we will keep arrays of [action, callback] for every sent message, so we will be able to run callback function\nwhen answer to message arrives. The list is indexed with message_id attribute",
            "line": " dist/syncano.js:1616"
        },
        {
            "message": "Missing item type\nHigh-level function mixins",
            "line": " dist/syncano.js:1622"
        },
        {
            "message": "Missing item type\nadd PubSub mixin",
            "line": " dist/syncano.js:1638"
        },
        {
            "message": "Missing item type\nRemember method and callback on the waitingForResponse list. When the response comes, callback will be called",
            "line": " dist/syncano.js:1832"
        },
        {
            "message": "Missing item type\nSend message to socket if already open and authorized. Otherwise - push to requestsQueue",
            "line": " dist/syncano.js:1837"
        },
        {
            "message": "Missing item type\nInternal method to check if projectId is a number - so I don't have to write this manualy again and again",
            "line": " dist/syncano.js:1849"
        },
        {
            "message": "Missing item type\nInternal method to check the variable name (string or number) and add correct key to passed object",
            "line": " dist/syncano.js:1858"
        },
        {
            "message": "Missing item type\nInternal shortcut method to send request and run the callback function with proper data as parameter",
            "line": " dist/syncano.js:1872"
        },
        {
            "message": "Missing item type\nExport to the root, which is probably `window`.",
            "line": " dist/syncano.js:1892"
        }
    ]
}